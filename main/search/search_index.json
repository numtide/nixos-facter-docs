{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"getting-started/generate-report/","title":"Generate a Report","text":"<p>To generate a report, you will need to have Nix installed on the target machine.</p> <pre><code>sudo nix run \\\n  --option experimental-features \"nix-command flakes\" \\\n  --option extra-substituters https://numtide.cachix.org \\\n  --option extra-trusted-public-keys numtide.cachix.org-1:2ps1kLBUWjxIneOy1Ik6cQjb41X0iXVXeHigGmycPPE= \\\n  github:numtide/nixos-facter -- -o facter.json\n</code></pre> <p>Note</p> <p>In the near-future we will add nixos-facter to nixpkgs. Until then, we recommend using the Numtide Binary Cache to avoid having to build everything from scratch.</p> <p>This will scan your system and produce a JSON-based report in a file named <code>facter.json</code>:</p> <p>This is a test change.</p> facter.json<pre><code>{\n  \"version\": 2, // (1)!\n  \"system\": \"x86_64-linux\", // (2)!\n  \"virtualisation\": \"none\", // (3)!\n  \"hardware\": { // (4)!\n    \"bios\": { ... },\n    \"bluetooth\": [ ... ],\n    \"bridge\": [ ... ],\n    \"chip_card\": [ ... ] ,\n    \"cpu\": [ ... ],\n    \"disk\": [ ... ],\n    \"graphics_card\": [ ... ],\n    \"hub\": [ ... ],\n    \"keyboard\": [ ... ],\n    \"memory\": [ ... ],\n    \"monitor\": [ ... ],\n    \"mouse\": [ ... ],\n    \"network_controller\": [ ... ],\n    \"network_interface\": [ ... ],\n    \"sound\": [ ... ],\n    \"storage_controller\": [ ... ],\n    \"system\": [ ... ],\n    \"unknown\": [ ... ],\n    \"usb_controller\": [ ... ]\n  },\n  \"smbios\": { // (5)!\n    \"bios\": { ... },\n    \"board\": { ... },\n    \"cache\": [ ... ],\n    \"chassis\": { ... },\n    \"config\": { ... },\n    \"language\": { ... },\n    \"memory_array\": [ ... ],\n    \"memory_array_mapped_address\": [ ... ],\n    \"memory_device\": [ ... ],\n    \"memory_device_mapped_address\": [ ... ],\n    \"memory_error\": [ ... ],\n    \"onboard\": [ ... ],\n    \"port_connector\": [ ... ],\n    \"processor\": [ ... ],\n    \"slot\": [ ... ],\n    \"system\": { ... }\n  }\n}\n</code></pre> <ol> <li>Used to track major breaking changes in the report format.</li> <li>Architecture of the target machine.</li> <li>Indicates whether the report was generated inside a virtualised environment, and if so, what type.</li> <li>All the various bits of hardware that could be detected.</li> <li>System Management BIOS information if available.</li> </ol> <p>Download that file and continue on to the next step.</p>"},{"location":"getting-started/nixos-configuration/","title":"NixOS Configuration","text":"<p>Taking the <code>facter.json</code> file generated in the previous step, we can construct a NixOS configuration:</p> FlakeNon-Flake flake.nix<pre><code>{\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    nixos-facter-modules.url = \"github:numtide/nixos-facter-modules\";\n  };\n\n  outputs =\n    inputs@{ nixpkgs, ... }:\n    let\n        inherit (nixpkgs) lib;\n    in\n    {\n      nixosConfigurations.basic = lib.nixosSystem {\n        modules = [\n\n          # enable the NixOS Facter module\n          inputs.nixos-facter-modules.nixosModules.facter\n\n          # configure the facter report\n          { config.facter.reportPath = ./facter.json; }\n\n          # Additional modules and configuration, for example:\n          #\n          # {\n          #   users.users.root.initialPassword = \"fnord23\";\n          #   boot.loader.grub.devices = lib.mkForce [ \"/dev/sda\" ];\n          #   fileSystems.\"/\".device = lib.mkDefault \"/dev/sda\";\n          # }\n          # ...\n          # Define your bootloader if you are not using grub\n          # { boot.loader.systemd-boot.enable = true; }\n        ];\n      };\n    };\n}\n</code></pre> configuration.nix<pre><code>{ lib, ... }:\n{\n  imports = [\n    \"${\n      (builtins.fetchTarball { url = \"https://github.com/numtide/nixos-facter-modules/\"; })\n    }/modules/nixos/facter.nix\"\n  ];\n\n  # configure the facter report\n  config.facter.reportPath = ./facter.json;\n\n  # Additional modules and configuration, for example:\n  #\n  # config.users.users.root.initialPassword = \"fnord23\";\n  # config.boot.loader.grub.devices = lib.mkForce [ \"/dev/sda\" ];\n  # config.fileSystems.\"/\".device = lib.mkDefault \"/dev/sda\";\n  #\n  # ...\n  # Define your bootloader if you are not using grub\n  # config.boot.loader.systemd-boot.enable = true;\n}\n</code></pre> <p>The NixOS Facter module will attempt to do the following:</p> <ul> <li>Configure <code>nixpkgs.hostPlatform</code> based on the detected architecture.</li> <li>Enable a variety of kernel modules and NixOS options related to VM and bare-metal environments based on the detected virtualisation.</li> <li>Enable CPU microcode updates based on the detected CPU(s).</li> <li>Ensure a variety of kernel modules are made available at boot time based on the detected (usb|firewire|storage) controllers and disks.</li> <li>Enable a variety of kernel modules based on the detected Broadcom and Intel WiFi devices.</li> </ul> <p>Roadmap</p> <p>We continue to add to and improve nixos-facter-modules. Our eventual goal is to replace much if not all of the functionality currently provided by nixos-hardware and nixos-generate-config.</p>"}]}